// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device.proto

// +build !nodev

package arhatgopb

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceCmdType int32

const (
	_INVALID_DEV_CMD        DeviceCmdType = 0
	CMD_DEV_CONNECT         DeviceCmdType = 1
	CMD_DEV_OPERATE         DeviceCmdType = 2
	CMD_DEV_COLLECT_METRICS DeviceCmdType = 3
	CMD_DEV_CLOSE           DeviceCmdType = 4
)

var DeviceCmdType_name = map[int32]string{
	0: "_INVALID_DEV_CMD",
	1: "CMD_DEV_CONNECT",
	2: "CMD_DEV_OPERATE",
	3: "CMD_DEV_COLLECT_METRICS",
	4: "CMD_DEV_CLOSE",
}

var DeviceCmdType_value = map[string]int32{
	"_INVALID_DEV_CMD":        0,
	"CMD_DEV_CONNECT":         1,
	"CMD_DEV_OPERATE":         2,
	"CMD_DEV_COLLECT_METRICS": 3,
	"CMD_DEV_CLOSE":           4,
}

func (DeviceCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}

type DeviceMsgType int32

const (
	_INVALID_DEV_MSG         DeviceMsgType = 0
	MSG_DEV_ERROR            DeviceMsgType = 1
	MSG_DEV_DONE             DeviceMsgType = 2
	MSG_DEV_REGISTER         DeviceMsgType = 3
	MSG_DEV_OPERATION_RESULT DeviceMsgType = 4
	MSG_DEV_METRICS          DeviceMsgType = 5
	MSG_DEV_EVENTS           DeviceMsgType = 6
)

var DeviceMsgType_name = map[int32]string{
	0: "_INVALID_DEV_MSG",
	1: "MSG_DEV_ERROR",
	2: "MSG_DEV_DONE",
	3: "MSG_DEV_REGISTER",
	4: "MSG_DEV_OPERATION_RESULT",
	5: "MSG_DEV_METRICS",
	6: "MSG_DEV_EVENTS",
}

var DeviceMsgType_value = map[string]int32{
	"_INVALID_DEV_MSG":         0,
	"MSG_DEV_ERROR":            1,
	"MSG_DEV_DONE":             2,
	"MSG_DEV_REGISTER":         3,
	"MSG_DEV_OPERATION_RESULT": 4,
	"MSG_DEV_METRICS":          5,
	"MSG_DEV_EVENTS":           6,
}

func (DeviceMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}

type DeviceEventType int32

const (
	_INVALID_DEV_EVENT DeviceEventType = 0
)

var DeviceEventType_name = map[int32]string{
	0: "_INVALID_DEV_EVENT",
}

var DeviceEventType_value = map[string]int32{
	"_INVALID_DEV_EVENT": 0,
}

func (DeviceEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}

type DeviceCmd struct {
	Kind    DeviceCmdType `protobuf:"varint,1,opt,name=kind,proto3,enum=arhat.DeviceCmdType" json:"kind,omitempty"`
	Seq     uint64        `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Payload []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *DeviceCmd) Reset()      { *m = DeviceCmd{} }
func (*DeviceCmd) ProtoMessage() {}
func (*DeviceCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{0}
}
func (m *DeviceCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCmd.Merge(m, src)
}
func (m *DeviceCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCmd proto.InternalMessageInfo

func (m *DeviceCmd) GetKind() DeviceCmdType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_DEV_CMD
}

func (m *DeviceCmd) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *DeviceCmd) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type TLSConfig struct {
	ServerName         string   `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	InsecureSkipVerify bool     `protobuf:"varint,2,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	MinVersion         uint32   `protobuf:"varint,3,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion         uint32   `protobuf:"varint,4,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	CaCert             []byte   `protobuf:"bytes,5,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	Cert               []byte   `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	Key                []byte   `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
	CipherSuites       []uint32 `protobuf:"varint,8,rep,packed,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	NextProtos         []string `protobuf:"bytes,9,rep,name=next_protos,json=nextProtos,proto3" json:"next_protos,omitempty"`
}

func (m *TLSConfig) Reset()      { *m = TLSConfig{} }
func (*TLSConfig) ProtoMessage() {}
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{1}
}
func (m *TLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSConfig.Merge(m, src)
}
func (m *TLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLSConfig proto.InternalMessageInfo

func (m *TLSConfig) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *TLSConfig) GetInsecureSkipVerify() bool {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return false
}

func (m *TLSConfig) GetMinVersion() uint32 {
	if m != nil {
		return m.MinVersion
	}
	return 0
}

func (m *TLSConfig) GetMaxVersion() uint32 {
	if m != nil {
		return m.MaxVersion
	}
	return 0
}

func (m *TLSConfig) GetCaCert() []byte {
	if m != nil {
		return m.CaCert
	}
	return nil
}

func (m *TLSConfig) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *TLSConfig) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TLSConfig) GetCipherSuites() []uint32 {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TLSConfig) GetNextProtos() []string {
	if m != nil {
		return m.NextProtos
	}
	return nil
}

type DeviceConnectCmd struct {
	// id assigned by the device manager in arhat agent
	Id     uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Target string            `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tls    *TLSConfig        `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (m *DeviceConnectCmd) Reset()      { *m = DeviceConnectCmd{} }
func (*DeviceConnectCmd) ProtoMessage() {}
func (*DeviceConnectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{2}
}
func (m *DeviceConnectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConnectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConnectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConnectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConnectCmd.Merge(m, src)
}
func (m *DeviceConnectCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConnectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConnectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConnectCmd proto.InternalMessageInfo

func (m *DeviceConnectCmd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceConnectCmd) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DeviceConnectCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *DeviceConnectCmd) GetTls() *TLSConfig {
	if m != nil {
		return m.Tls
	}
	return nil
}

type DeviceOperateCmd struct {
	// id assigned by the device manager in arhat agent
	Id     uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (optional) operation data
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DeviceOperateCmd) Reset()      { *m = DeviceOperateCmd{} }
func (*DeviceOperateCmd) ProtoMessage() {}
func (*DeviceOperateCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{3}
}
func (m *DeviceOperateCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperateCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperateCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperateCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperateCmd.Merge(m, src)
}
func (m *DeviceOperateCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperateCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperateCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperateCmd proto.InternalMessageInfo

func (m *DeviceOperateCmd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceOperateCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *DeviceOperateCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeviceMetricsCollectCmd struct {
	// id assigned by the device manager in arhat agent
	Id     uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeviceMetricsCollectCmd) Reset()      { *m = DeviceMetricsCollectCmd{} }
func (*DeviceMetricsCollectCmd) ProtoMessage() {}
func (*DeviceMetricsCollectCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{4}
}
func (m *DeviceMetricsCollectCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetricsCollectCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetricsCollectCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetricsCollectCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetricsCollectCmd.Merge(m, src)
}
func (m *DeviceMetricsCollectCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetricsCollectCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetricsCollectCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetricsCollectCmd proto.InternalMessageInfo

func (m *DeviceMetricsCollectCmd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeviceMetricsCollectCmd) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type DeviceCloseCmd struct {
	// id assigned by the device manager in arhat agent
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeviceCloseCmd) Reset()      { *m = DeviceCloseCmd{} }
func (*DeviceCloseCmd) ProtoMessage() {}
func (*DeviceCloseCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{5}
}
func (m *DeviceCloseCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceCloseCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceCloseCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceCloseCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCloseCmd.Merge(m, src)
}
func (m *DeviceCloseCmd) XXX_Size() int {
	return m.Size()
}
func (m *DeviceCloseCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCloseCmd.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCloseCmd proto.InternalMessageInfo

func (m *DeviceCloseCmd) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeviceMsg struct {
	Kind DeviceMsgType `protobuf:"varint,1,opt,name=kind,proto3,enum=arhat.DeviceMsgType" json:"kind,omitempty"`
	// (optional) if this is an answer for a Cmd, set ack to seq in Cmd
	Ack     uint64 `protobuf:"varint,2,opt,name=ack,proto3" json:"ack,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *DeviceMsg) Reset()      { *m = DeviceMsg{} }
func (*DeviceMsg) ProtoMessage() {}
func (*DeviceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{6}
}
func (m *DeviceMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMsg.Merge(m, src)
}
func (m *DeviceMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMsg proto.InternalMessageInfo

func (m *DeviceMsg) GetKind() DeviceMsgType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_DEV_MSG
}

func (m *DeviceMsg) GetAck() uint64 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *DeviceMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type DeviceDoneMsg struct {
}

func (m *DeviceDoneMsg) Reset()      { *m = DeviceDoneMsg{} }
func (*DeviceDoneMsg) ProtoMessage() {}
func (*DeviceDoneMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{7}
}
func (m *DeviceDoneMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceDoneMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceDoneMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceDoneMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceDoneMsg.Merge(m, src)
}
func (m *DeviceDoneMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceDoneMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceDoneMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceDoneMsg proto.InternalMessageInfo

type DeviceRegisterMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeviceRegisterMsg) Reset()      { *m = DeviceRegisterMsg{} }
func (*DeviceRegisterMsg) ProtoMessage() {}
func (*DeviceRegisterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{8}
}
func (m *DeviceRegisterMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRegisterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRegisterMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRegisterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRegisterMsg.Merge(m, src)
}
func (m *DeviceRegisterMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRegisterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRegisterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRegisterMsg proto.InternalMessageInfo

func (m *DeviceRegisterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeviceOperateResultMsg struct {
	Result [][]byte `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *DeviceOperateResultMsg) Reset()      { *m = DeviceOperateResultMsg{} }
func (*DeviceOperateResultMsg) ProtoMessage() {}
func (*DeviceOperateResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{9}
}
func (m *DeviceOperateResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceOperateResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceOperateResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceOperateResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceOperateResultMsg.Merge(m, src)
}
func (m *DeviceOperateResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceOperateResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceOperateResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceOperateResultMsg proto.InternalMessageInfo

func (m *DeviceOperateResultMsg) GetResult() [][]byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeviceMetricsMsg struct {
	Values []*DeviceMetricsMsg_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *DeviceMetricsMsg) Reset()      { *m = DeviceMetricsMsg{} }
func (*DeviceMetricsMsg) ProtoMessage() {}
func (*DeviceMetricsMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10}
}
func (m *DeviceMetricsMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetricsMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetricsMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetricsMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetricsMsg.Merge(m, src)
}
func (m *DeviceMetricsMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetricsMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetricsMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetricsMsg proto.InternalMessageInfo

func (m *DeviceMetricsMsg) GetValues() []*DeviceMetricsMsg_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type DeviceMetricsMsg_Value struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// unix timestamp
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *DeviceMetricsMsg_Value) Reset()      { *m = DeviceMetricsMsg_Value{} }
func (*DeviceMetricsMsg_Value) ProtoMessage() {}
func (*DeviceMetricsMsg_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{10, 0}
}
func (m *DeviceMetricsMsg_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceMetricsMsg_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceMetricsMsg_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceMetricsMsg_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetricsMsg_Value.Merge(m, src)
}
func (m *DeviceMetricsMsg_Value) XXX_Size() int {
	return m.Size()
}
func (m *DeviceMetricsMsg_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetricsMsg_Value.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetricsMsg_Value proto.InternalMessageInfo

func (m *DeviceMetricsMsg_Value) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DeviceMetricsMsg_Value) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type DeviceEventMsg struct {
	Kind DeviceEventType `protobuf:"varint,1,opt,name=kind,proto3,enum=arhat.DeviceEventType" json:"kind,omitempty"`
}

func (m *DeviceEventMsg) Reset()      { *m = DeviceEventMsg{} }
func (*DeviceEventMsg) ProtoMessage() {}
func (*DeviceEventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{11}
}
func (m *DeviceEventMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceEventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceEventMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceEventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceEventMsg.Merge(m, src)
}
func (m *DeviceEventMsg) XXX_Size() int {
	return m.Size()
}
func (m *DeviceEventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceEventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceEventMsg proto.InternalMessageInfo

func (m *DeviceEventMsg) GetKind() DeviceEventType {
	if m != nil {
		return m.Kind
	}
	return _INVALID_DEV_EVENT
}

type ErrorMsg struct {
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ErrorMsg) Reset()      { *m = ErrorMsg{} }
func (*ErrorMsg) ProtoMessage() {}
func (*ErrorMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_870276a56ac00da5, []int{12}
}
func (m *ErrorMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorMsg.Merge(m, src)
}
func (m *ErrorMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrorMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorMsg proto.InternalMessageInfo

func (m *ErrorMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("arhat.DeviceCmdType", DeviceCmdType_name, DeviceCmdType_value)
	proto.RegisterEnum("arhat.DeviceMsgType", DeviceMsgType_name, DeviceMsgType_value)
	proto.RegisterEnum("arhat.DeviceEventType", DeviceEventType_name, DeviceEventType_value)
	proto.RegisterType((*DeviceCmd)(nil), "arhat.DeviceCmd")
	proto.RegisterType((*TLSConfig)(nil), "arhat.TLSConfig")
	proto.RegisterType((*DeviceConnectCmd)(nil), "arhat.DeviceConnectCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.DeviceConnectCmd.ParamsEntry")
	proto.RegisterType((*DeviceOperateCmd)(nil), "arhat.DeviceOperateCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.DeviceOperateCmd.ParamsEntry")
	proto.RegisterType((*DeviceMetricsCollectCmd)(nil), "arhat.DeviceMetricsCollectCmd")
	proto.RegisterMapType((map[string]string)(nil), "arhat.DeviceMetricsCollectCmd.ParamsEntry")
	proto.RegisterType((*DeviceCloseCmd)(nil), "arhat.DeviceCloseCmd")
	proto.RegisterType((*DeviceMsg)(nil), "arhat.DeviceMsg")
	proto.RegisterType((*DeviceDoneMsg)(nil), "arhat.DeviceDoneMsg")
	proto.RegisterType((*DeviceRegisterMsg)(nil), "arhat.DeviceRegisterMsg")
	proto.RegisterType((*DeviceOperateResultMsg)(nil), "arhat.DeviceOperateResultMsg")
	proto.RegisterType((*DeviceMetricsMsg)(nil), "arhat.DeviceMetricsMsg")
	proto.RegisterType((*DeviceMetricsMsg_Value)(nil), "arhat.DeviceMetricsMsg.Value")
	proto.RegisterType((*DeviceEventMsg)(nil), "arhat.DeviceEventMsg")
	proto.RegisterType((*ErrorMsg)(nil), "arhat.ErrorMsg")
}

func init() { proto.RegisterFile("device.proto", fileDescriptor_870276a56ac00da5) }

var fileDescriptor_870276a56ac00da5 = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0xdb, 0xc6,
	0x13, 0xd5, 0x8a, 0xb2, 0x6c, 0x8d, 0x2c, 0x9b, 0xd9, 0x9f, 0x61, 0x13, 0xfe, 0xa5, 0x8c, 0xc0,
	0x1c, 0xaa, 0x1a, 0xad, 0x6a, 0xb8, 0x28, 0xd0, 0x36, 0xbd, 0x38, 0x12, 0x61, 0x08, 0xd0, 0x1f,
	0x63, 0xa9, 0xe8, 0xd0, 0x0b, 0xb1, 0xa1, 0x36, 0x0a, 0x21, 0x89, 0x64, 0xb9, 0x6b, 0xc1, 0x3a,
	0xb5, 0xa7, 0x9e, 0xfb, 0x25, 0x8a, 0xe6, 0xd4, 0xcf, 0xd1, 0xa3, 0x4f, 0x45, 0x8e, 0xb5, 0x7c,
	0xe9, 0x31, 0x1f, 0xa1, 0xd8, 0x25, 0x29, 0x59, 0x8e, 0x9a, 0x4b, 0x6e, 0xb3, 0x6f, 0xdf, 0xee,
	0xbc, 0x79, 0xc3, 0xe1, 0xc2, 0xee, 0x90, 0xcd, 0x7c, 0x8f, 0xd5, 0xa3, 0x38, 0x14, 0x21, 0xde,
	0xa2, 0xf1, 0x6b, 0x2a, 0x2c, 0x0a, 0xa5, 0xa6, 0x82, 0x1b, 0xd3, 0x21, 0xae, 0x41, 0x61, 0xec,
	0x07, 0x43, 0x03, 0x55, 0x51, 0x6d, 0xef, 0xec, 0xa0, 0xae, 0x28, 0xf5, 0xe5, 0x7e, 0x7f, 0x1e,
	0x31, 0xa2, 0x18, 0x58, 0x07, 0x8d, 0xb3, 0x1f, 0x8d, 0x7c, 0x15, 0xd5, 0x0a, 0x44, 0x86, 0xd8,
	0x80, 0xed, 0x88, 0xce, 0x27, 0x21, 0x1d, 0x1a, 0x5a, 0x15, 0xd5, 0x76, 0x49, 0xb6, 0xb4, 0x7e,
	0xcb, 0x43, 0xa9, 0xdf, 0x76, 0x1a, 0x61, 0xf0, 0xca, 0x1f, 0xe1, 0x27, 0x50, 0xe6, 0x2c, 0x9e,
	0xb1, 0xd8, 0x0d, 0xe8, 0x94, 0xa9, 0x54, 0x25, 0x02, 0x09, 0xd4, 0xa5, 0x53, 0x86, 0x4f, 0xe1,
	0xc0, 0x0f, 0x38, 0xf3, 0xae, 0x62, 0xe6, 0xf2, 0xb1, 0x1f, 0xb9, 0x33, 0x16, 0xfb, 0xaf, 0xe6,
	0x2a, 0xd7, 0x0e, 0xc1, 0xd9, 0x9e, 0x33, 0xf6, 0xa3, 0x81, 0xda, 0x91, 0x57, 0x4e, 0xfd, 0x40,
	0xf2, 0xb8, 0x1f, 0x06, 0x2a, 0x7d, 0x85, 0xc0, 0xd4, 0x0f, 0x06, 0x09, 0xa2, 0x08, 0xf4, 0x7a,
	0x49, 0x28, 0xa4, 0x04, 0x7a, 0x9d, 0x11, 0x8e, 0x60, 0xdb, 0xa3, 0xae, 0xc7, 0x62, 0x61, 0x6c,
	0x29, 0xf1, 0x45, 0x8f, 0x36, 0x58, 0x2c, 0x30, 0x86, 0x82, 0x42, 0x8b, 0x0a, 0x55, 0xb1, 0xac,
	0x7d, 0xcc, 0xe6, 0xc6, 0xb6, 0x82, 0x64, 0x88, 0x9f, 0x42, 0xc5, 0xf3, 0xa3, 0xd7, 0x2c, 0x76,
	0xf9, 0x95, 0x2f, 0x18, 0x37, 0x76, 0xaa, 0x5a, 0xad, 0x42, 0x76, 0x13, 0xd0, 0x51, 0x98, 0x14,
	0x11, 0xb0, 0x6b, 0xe1, 0x2a, 0xfb, 0xb9, 0x51, 0xaa, 0x6a, 0xb2, 0x70, 0x09, 0x5d, 0x2a, 0xc4,
	0xfa, 0x0b, 0x81, 0x9e, 0x7a, 0x1d, 0x06, 0x01, 0xf3, 0x84, 0x6c, 0xc9, 0x1e, 0xe4, 0xfd, 0xa4,
	0x21, 0x15, 0x92, 0xf7, 0x87, 0xf8, 0x10, 0x8a, 0x82, 0xc6, 0x23, 0x26, 0x94, 0x1f, 0x25, 0x92,
	0xae, 0xf0, 0x33, 0x28, 0x46, 0x34, 0xa6, 0x53, 0x6e, 0x68, 0x55, 0xad, 0x56, 0x3e, 0x7b, 0xba,
	0xde, 0xbc, 0xe5, 0x85, 0xf5, 0x4b, 0xc5, 0xb2, 0x03, 0x11, 0xcf, 0x49, 0x7a, 0x04, 0x5b, 0xa0,
	0x89, 0x09, 0x57, 0xbe, 0x94, 0xcf, 0xf4, 0xf4, 0xe4, 0xb2, 0x65, 0x44, 0x6e, 0x1e, 0x7f, 0x0b,
	0xe5, 0x7b, 0x47, 0x33, 0x13, 0x92, 0xf6, 0x29, 0x13, 0x0e, 0x60, 0x6b, 0x46, 0x27, 0x57, 0x2c,
	0x15, 0x96, 0x2c, 0xbe, 0xcb, 0x7f, 0x83, 0xac, 0x3f, 0x96, 0x85, 0xf5, 0x22, 0x16, 0x53, 0xc1,
	0x36, 0x15, 0xb6, 0x2a, 0x20, 0xbf, 0xa1, 0x80, 0xd5, 0xc1, 0x8d, 0x05, 0x60, 0x28, 0x0c, 0xa9,
	0xa0, 0xe9, 0x97, 0xa7, 0xe2, 0x8f, 0x11, 0xfc, 0x06, 0xc1, 0x51, 0x92, 0xb7, 0xc3, 0x44, 0xec,
	0x7b, 0xbc, 0x11, 0x4e, 0x26, 0xff, 0xd1, 0x90, 0xe7, 0x0f, 0x74, 0x9f, 0xac, 0xe9, 0x7e, 0xef,
	0xfc, 0x26, 0xf9, 0x1f, 0x23, 0xb5, 0x0a, 0x7b, 0x69, 0x8b, 0x27, 0x21, 0xdf, 0x64, 0xec, 0x6a,
	0xc2, 0x3b, 0x7c, 0xf4, 0xc1, 0x09, 0xef, 0xf0, 0xd1, 0xfa, 0x84, 0x53, 0x6f, 0x9c, 0x4d, 0x38,
	0xf5, 0xc6, 0x1f, 0x98, 0xf0, 0x7d, 0xa8, 0x24, 0x57, 0x34, 0xc3, 0x40, 0x5e, 0x63, 0x7d, 0x0a,
	0x8f, 0x12, 0x80, 0xb0, 0x91, 0xcf, 0x05, 0x8b, 0x65, 0x6e, 0x0c, 0x85, 0x7b, 0x23, 0xaf, 0x62,
	0xeb, 0x14, 0x0e, 0xd7, 0x1a, 0x4c, 0x18, 0xbf, 0x9a, 0x08, 0xc9, 0x3e, 0x84, 0x62, 0xac, 0x16,
	0x06, 0xaa, 0x6a, 0x72, 0x22, 0x93, 0x95, 0xf5, 0xcb, 0xf2, 0x63, 0x4a, 0xbd, 0x95, 0xe4, 0xaf,
	0xa1, 0xa8, 0x2c, 0xe1, 0x8a, 0x5c, 0x3e, 0xfb, 0x64, 0x53, 0x13, 0x3a, 0x7c, 0x54, 0x1f, 0x48,
	0x16, 0x49, 0xc9, 0xc7, 0xcf, 0x60, 0x4b, 0x01, 0x2b, 0x7f, 0xa5, 0x36, 0x94, 0xfa, 0x8b, 0x1f,
	0x43, 0x49, 0xf8, 0x53, 0xc6, 0x05, 0x9d, 0x46, 0xca, 0x08, 0x8d, 0xac, 0x00, 0xeb, 0xfb, 0xcc,
	0x79, 0x7b, 0xc6, 0x02, 0x25, 0xf9, 0x64, 0xcd, 0xdc, 0xc3, 0x35, 0x0d, 0x8a, 0xb4, 0xb2, 0xd7,
	0xfa, 0x1c, 0x76, 0xec, 0x38, 0x0e, 0x95, 0x31, 0x55, 0x28, 0x0f, 0x19, 0xf7, 0x62, 0x3f, 0x12,
	0xf2, 0xf7, 0x94, 0xf8, 0x73, 0x1f, 0x3a, 0xf9, 0x29, 0x33, 0x38, 0xfd, 0x0b, 0xe3, 0x03, 0xd0,
	0xdd, 0x56, 0x77, 0x70, 0xde, 0x6e, 0x35, 0xdd, 0xa6, 0x3d, 0x70, 0x1b, 0x9d, 0xa6, 0x9e, 0xc3,
	0xff, 0x83, 0xfd, 0x46, 0x27, 0x05, 0x7a, 0xdd, 0xae, 0xdd, 0xe8, 0xeb, 0xe8, 0x3e, 0xd8, 0xbb,
	0xb4, 0xc9, 0x79, 0xdf, 0xd6, 0xf3, 0xf8, 0xff, 0x70, 0xb4, 0x62, 0xb6, 0xdb, 0x76, 0xa3, 0xef,
	0x76, 0xec, 0x3e, 0x69, 0x35, 0x1c, 0x5d, 0xc3, 0x8f, 0xa0, 0xb2, 0xdc, 0x6c, 0xf7, 0x1c, 0x5b,
	0x2f, 0x9c, 0xfc, 0x8e, 0x32, 0x05, 0xe9, 0x57, 0xf2, 0x9e, 0x82, 0x8e, 0x73, 0xa1, 0xe7, 0xe4,
	0xd1, 0x8e, 0x73, 0xa1, 0x00, 0x9b, 0x90, 0x1e, 0xd1, 0x11, 0xd6, 0x61, 0x37, 0x83, 0x9a, 0xbd,
	0xae, 0x4c, 0x7e, 0x00, 0x7a, 0x86, 0x10, 0xfb, 0xa2, 0xe5, 0xf4, 0x6d, 0xa2, 0x6b, 0xf8, 0x31,
	0x18, 0x19, 0x9a, 0xe8, 0x6c, 0xf5, 0xba, 0x2e, 0xb1, 0x9d, 0x17, 0xed, 0xbe, 0x5e, 0x90, 0x55,
	0x64, 0xbb, 0x99, 0xd0, 0x2d, 0x8c, 0x61, 0x6f, 0x99, 0x6d, 0x60, 0x77, 0xfb, 0x8e, 0x5e, 0x3c,
	0xf9, 0x0c, 0xf6, 0x1f, 0x38, 0x8e, 0x0f, 0x01, 0xaf, 0x49, 0x55, 0x5c, 0x3d, 0x77, 0x76, 0xbe,
	0xa4, 0x5e, 0x0b, 0x16, 0xa8, 0x87, 0xa0, 0x0e, 0x05, 0x67, 0x1e, 0x78, 0x58, 0x7f, 0x38, 0x19,
	0xc7, 0xfa, 0xc3, 0xd7, 0xb0, 0x86, 0x4e, 0xd1, 0xf3, 0x17, 0x37, 0xb7, 0x66, 0xee, 0xed, 0xad,
	0x99, 0x7b, 0x77, 0x6b, 0xa2, 0x9f, 0x17, 0x26, 0x7a, 0xb3, 0x30, 0xd1, 0x9f, 0x0b, 0x13, 0xdd,
	0x2c, 0x4c, 0xf4, 0xf7, 0xc2, 0x44, 0xff, 0x2c, 0xcc, 0xdc, 0xbb, 0x85, 0x89, 0x7e, 0xbd, 0x33,
	0x73, 0x37, 0x77, 0x66, 0xee, 0xed, 0x9d, 0x99, 0xfb, 0xe1, 0x49, 0x72, 0xd5, 0x90, 0xcd, 0xbe,
	0x54, 0xd1, 0x17, 0xea, 0x4d, 0x48, 0xe2, 0x51, 0x18, 0xbd, 0x7c, 0x59, 0x54, 0xc0, 0x57, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x63, 0x23, 0xe3, 0xb3, 0x07, 0x00, 0x00,
}

func (x DeviceCmdType) String() string {
	s, ok := DeviceCmdType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceMsgType) String() string {
	s, ok := DeviceMsgType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceEventType) String() string {
	s, ok := DeviceEventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeviceCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCmd)
	if !ok {
		that2, ok := that.(DeviceCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *TLSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TLSConfig)
	if !ok {
		that2, ok := that.(TLSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerName != that1.ServerName {
		return false
	}
	if this.InsecureSkipVerify != that1.InsecureSkipVerify {
		return false
	}
	if this.MinVersion != that1.MinVersion {
		return false
	}
	if this.MaxVersion != that1.MaxVersion {
		return false
	}
	if !bytes.Equal(this.CaCert, that1.CaCert) {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if len(this.CipherSuites) != len(that1.CipherSuites) {
		return false
	}
	for i := range this.CipherSuites {
		if this.CipherSuites[i] != that1.CipherSuites[i] {
			return false
		}
	}
	if len(this.NextProtos) != len(that1.NextProtos) {
		return false
	}
	for i := range this.NextProtos {
		if this.NextProtos[i] != that1.NextProtos[i] {
			return false
		}
	}
	return true
}
func (this *DeviceConnectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceConnectCmd)
	if !ok {
		that2, ok := that.(DeviceConnectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !this.Tls.Equal(that1.Tls) {
		return false
	}
	return true
}
func (this *DeviceOperateCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperateCmd)
	if !ok {
		that2, ok := that.(DeviceOperateCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *DeviceMetricsCollectCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetricsCollectCmd)
	if !ok {
		that2, ok := that.(DeviceMetricsCollectCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Params) != len(that1.Params) {
		return false
	}
	for i := range this.Params {
		if this.Params[i] != that1.Params[i] {
			return false
		}
	}
	return true
}
func (this *DeviceCloseCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceCloseCmd)
	if !ok {
		that2, ok := that.(DeviceCloseCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeviceMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMsg)
	if !ok {
		that2, ok := that.(DeviceMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *DeviceDoneMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceDoneMsg)
	if !ok {
		that2, ok := that.(DeviceDoneMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeviceRegisterMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceRegisterMsg)
	if !ok {
		that2, ok := that.(DeviceRegisterMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DeviceOperateResultMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceOperateResultMsg)
	if !ok {
		that2, ok := that.(DeviceOperateResultMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Result) != len(that1.Result) {
		return false
	}
	for i := range this.Result {
		if !bytes.Equal(this.Result[i], that1.Result[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceMetricsMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetricsMsg)
	if !ok {
		that2, ok := that.(DeviceMetricsMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceMetricsMsg_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceMetricsMsg_Value)
	if !ok {
		that2, ok := that.(DeviceMetricsMsg_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *DeviceEventMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceEventMsg)
	if !ok {
		that2, ok := that.(DeviceEventMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *ErrorMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorMsg)
	if !ok {
		that2, ok := that.(ErrorMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *DeviceCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&arhatgopb.DeviceCmd{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&arhatgopb.TLSConfig{")
	s = append(s, "ServerName: "+fmt.Sprintf("%#v", this.ServerName)+",\n")
	s = append(s, "InsecureSkipVerify: "+fmt.Sprintf("%#v", this.InsecureSkipVerify)+",\n")
	s = append(s, "MinVersion: "+fmt.Sprintf("%#v", this.MinVersion)+",\n")
	s = append(s, "MaxVersion: "+fmt.Sprintf("%#v", this.MaxVersion)+",\n")
	s = append(s, "CaCert: "+fmt.Sprintf("%#v", this.CaCert)+",\n")
	s = append(s, "Cert: "+fmt.Sprintf("%#v", this.Cert)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "CipherSuites: "+fmt.Sprintf("%#v", this.CipherSuites)+",\n")
	s = append(s, "NextProtos: "+fmt.Sprintf("%#v", this.NextProtos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceConnectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&arhatgopb.DeviceConnectCmd{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	if this.Tls != nil {
		s = append(s, "Tls: "+fmt.Sprintf("%#v", this.Tls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceOperateCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&arhatgopb.DeviceOperateCmd{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetricsCollectCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&arhatgopb.DeviceMetricsCollectCmd{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%#v: %#v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	if this.Params != nil {
		s = append(s, "Params: "+mapStringForParams+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceCloseCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.DeviceCloseCmd{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&arhatgopb.DeviceMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Ack: "+fmt.Sprintf("%#v", this.Ack)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceDoneMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&arhatgopb.DeviceDoneMsg{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceRegisterMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.DeviceRegisterMsg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceOperateResultMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.DeviceOperateResultMsg{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetricsMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.DeviceMetricsMsg{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceMetricsMsg_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&arhatgopb.DeviceMetricsMsg_Value{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceEventMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.DeviceEventMsg{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&arhatgopb.ErrorMsg{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDevice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceExtensionClient is the client API for DeviceExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceExtensionClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (DeviceExtension_SyncClient, error)
}

type deviceExtensionClient struct {
	cc *grpc.ClientConn
}

func NewDeviceExtensionClient(cc *grpc.ClientConn) DeviceExtensionClient {
	return &deviceExtensionClient{cc}
}

func (c *deviceExtensionClient) Sync(ctx context.Context, opts ...grpc.CallOption) (DeviceExtension_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceExtension_serviceDesc.Streams[0], "/arhat.DeviceExtension/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceExtensionSyncClient{stream}
	return x, nil
}

type DeviceExtension_SyncClient interface {
	Send(*DeviceMsg) error
	Recv() (*DeviceCmd, error)
	grpc.ClientStream
}

type deviceExtensionSyncClient struct {
	grpc.ClientStream
}

func (x *deviceExtensionSyncClient) Send(m *DeviceMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceExtensionSyncClient) Recv() (*DeviceCmd, error) {
	m := new(DeviceCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceExtensionServer is the server API for DeviceExtension service.
type DeviceExtensionServer interface {
	Sync(DeviceExtension_SyncServer) error
}

// UnimplementedDeviceExtensionServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceExtensionServer struct {
}

func (*UnimplementedDeviceExtensionServer) Sync(srv DeviceExtension_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterDeviceExtensionServer(s *grpc.Server, srv DeviceExtensionServer) {
	s.RegisterService(&_DeviceExtension_serviceDesc, srv)
}

func _DeviceExtension_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceExtensionServer).Sync(&deviceExtensionSyncServer{stream})
}

type DeviceExtension_SyncServer interface {
	Send(*DeviceCmd) error
	Recv() (*DeviceMsg, error)
	grpc.ServerStream
}

type deviceExtensionSyncServer struct {
	grpc.ServerStream
}

func (x *deviceExtensionSyncServer) Send(m *DeviceCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceExtensionSyncServer) Recv() (*DeviceMsg, error) {
	m := new(DeviceMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DeviceExtension_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arhat.DeviceExtension",
	HandlerType: (*DeviceExtensionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _DeviceExtension_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device.proto",
}

func (m *DeviceCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seq != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Kind != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextProtos) > 0 {
		for iNdEx := len(m.NextProtos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NextProtos[iNdEx])
			copy(dAtA[i:], m.NextProtos[iNdEx])
			i = encodeVarintDevice(dAtA, i, uint64(len(m.NextProtos[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CipherSuites) > 0 {
		dAtA2 := make([]byte, len(m.CipherSuites)*10)
		var j1 int
		for _, num := range m.CipherSuites {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDevice(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CaCert) > 0 {
		i -= len(m.CaCert)
		copy(dAtA[i:], m.CaCert)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.CaCert)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxVersion != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.MinVersion != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.MinVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.InsecureSkipVerify {
		i--
		if m.InsecureSkipVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConnectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConnectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConnectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceOperateCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperateCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperateCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetricsCollectCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetricsCollectCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetricsCollectCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for k := range m.Params {
			v := m.Params[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDevice(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDevice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDevice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceCloseCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceCloseCmd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCloseCmd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Ack != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Ack))
		i--
		dAtA[i] = 0x10
	}
	if m.Kind != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceDoneMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceDoneMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceDoneMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeviceRegisterMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRegisterMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRegisterMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceOperateResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceOperateResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceOperateResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Result[iNdEx])
			copy(dAtA[i:], m.Result[iNdEx])
			i = encodeVarintDevice(dAtA, i, uint64(len(m.Result[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetricsMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetricsMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetricsMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeviceMetricsMsg_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceMetricsMsg_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceMetricsMsg_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *DeviceEventMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceEventMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceEventMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintDevice(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ErrorMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovDevice(uint64(m.Kind))
	}
	if m.Seq != 0 {
		n += 1 + sovDevice(uint64(m.Seq))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *TLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.InsecureSkipVerify {
		n += 2
	}
	if m.MinVersion != 0 {
		n += 1 + sovDevice(uint64(m.MinVersion))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovDevice(uint64(m.MaxVersion))
	}
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.CipherSuites) > 0 {
		l = 0
		for _, e := range m.CipherSuites {
			l += sovDevice(uint64(e))
		}
		n += 1 + sovDevice(uint64(l)) + l
	}
	if len(m.NextProtos) > 0 {
		for _, s := range m.NextProtos {
			l = len(s)
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceConnectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevice(uint64(m.Id))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDevice(uint64(len(k))) + 1 + len(v) + sovDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovDevice(uint64(mapEntrySize))
		}
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *DeviceOperateCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevice(uint64(m.Id))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDevice(uint64(len(k))) + 1 + len(v) + sovDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovDevice(uint64(mapEntrySize))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *DeviceMetricsCollectCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevice(uint64(m.Id))
	}
	if len(m.Params) > 0 {
		for k, v := range m.Params {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDevice(uint64(len(k))) + 1 + len(v) + sovDevice(uint64(len(v)))
			n += mapEntrySize + 1 + sovDevice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DeviceCloseCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDevice(uint64(m.Id))
	}
	return n
}

func (m *DeviceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovDevice(uint64(m.Kind))
	}
	if m.Ack != 0 {
		n += 1 + sovDevice(uint64(m.Ack))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *DeviceDoneMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeviceRegisterMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func (m *DeviceOperateResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, b := range m.Result {
			l = len(b)
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceMetricsMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	return n
}

func (m *DeviceMetricsMsg_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	if m.Timestamp != 0 {
		n += 1 + sovDevice(uint64(m.Timestamp))
	}
	return n
}

func (m *DeviceEventMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovDevice(uint64(m.Kind))
	}
	return n
}

func (m *ErrorMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	return n
}

func sovDevice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCmd{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSConfig{`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`InsecureSkipVerify:` + fmt.Sprintf("%v", this.InsecureSkipVerify) + `,`,
		`MinVersion:` + fmt.Sprintf("%v", this.MinVersion) + `,`,
		`MaxVersion:` + fmt.Sprintf("%v", this.MaxVersion) + `,`,
		`CaCert:` + fmt.Sprintf("%v", this.CaCert) + `,`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`NextProtos:` + fmt.Sprintf("%v", this.NextProtos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceConnectCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceConnectCmd{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Tls:` + strings.Replace(this.Tls.String(), "TLSConfig", "TLSConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceOperateCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceOperateCmd{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Params:` + mapStringForParams + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetricsCollectCmd) String() string {
	if this == nil {
		return "nil"
	}
	keysForParams := make([]string, 0, len(this.Params))
	for k, _ := range this.Params {
		keysForParams = append(keysForParams, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForParams)
	mapStringForParams := "map[string]string{"
	for _, k := range keysForParams {
		mapStringForParams += fmt.Sprintf("%v: %v,", k, this.Params[k])
	}
	mapStringForParams += "}"
	s := strings.Join([]string{`&DeviceMetricsCollectCmd{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Params:` + mapStringForParams + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceCloseCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCloseCmd{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceDoneMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceDoneMsg{`,
		`}`,
	}, "")
	return s
}
func (this *DeviceRegisterMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceRegisterMsg{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceOperateResultMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceOperateResultMsg{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetricsMsg) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*DeviceMetricsMsg_Value{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(fmt.Sprintf("%v", f), "DeviceMetricsMsg_Value", "DeviceMetricsMsg_Value", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&DeviceMetricsMsg{`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceMetricsMsg_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceMetricsMsg_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceEventMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceEventMsg{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorMsg{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDevice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= DeviceCmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureSkipVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureSkipVerify = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVersion", wireType)
			}
			m.MinVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CipherSuites = append(m.CipherSuites, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevice
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevice
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CipherSuites) == 0 {
					m.CipherSuites = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CipherSuites = append(m.CipherSuites, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProtos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProtos = append(m.NextProtos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConnectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConnectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConnectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &TLSConfig{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceOperateCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperateCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperateCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetricsCollectCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetricsCollectCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetricsCollectCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDevice
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDevice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDevice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Params[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceCloseCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceCloseCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceCloseCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= DeviceMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			m.Ack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ack |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceDoneMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceDoneMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceDoneMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRegisterMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRegisterMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRegisterMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceOperateResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOperateResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOperateResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, make([]byte, postIndex-iNdEx))
			copy(m.Result[len(m.Result)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetricsMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceMetricsMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceMetricsMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &DeviceMetricsMsg_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceMetricsMsg_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceEventMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceEventMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceEventMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= DeviceEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevice = fmt.Errorf("proto: unexpected end of group")
)
