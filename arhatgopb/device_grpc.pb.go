// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: device_grpc.proto

// +build !nodev,!nodev_grpc

package arhatgopb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("device_grpc.proto", fileDescriptor_07a21a0598da73eb) }

var fileDescriptor_07a21a0598da73eb = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x49, 0x2d, 0xcb,
	0x4c, 0x4e, 0x8d, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d,
	0x2c, 0xca, 0x48, 0x2c, 0x91, 0xe2, 0x81, 0xc8, 0x40, 0x04, 0x8d, 0x1c, 0xb9, 0xf8, 0x5d, 0xc0,
	0x7c, 0xd7, 0x8a, 0x92, 0xd4, 0xbc, 0xe2, 0xcc, 0xfc, 0x3c, 0x21, 0x3d, 0x2e, 0x96, 0xe0, 0xca,
	0xbc, 0x64, 0x21, 0x01, 0x3d, 0xb0, 0x06, 0x3d, 0x88, 0xbc, 0x6f, 0x71, 0xba, 0x14, 0xaa, 0x88,
	0x73, 0x6e, 0x8a, 0x06, 0xa3, 0x01, 0xa3, 0x53, 0xe8, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca,
	0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f,
	0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86,
	0x28, 0x79, 0x88, 0x51, 0x29, 0xa9, 0x65, 0xfa, 0x60, 0x96, 0x2e, 0xd8, 0x3d, 0x10, 0x76, 0x7a,
	0x7e, 0x41, 0x52, 0x12, 0x1b, 0x58, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x05, 0xe4,
	0x66, 0xca, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceExtensionClient is the client API for DeviceExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceExtensionClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (DeviceExtension_SyncClient, error)
}

type deviceExtensionClient struct {
	cc *grpc.ClientConn
}

func NewDeviceExtensionClient(cc *grpc.ClientConn) DeviceExtensionClient {
	return &deviceExtensionClient{cc}
}

func (c *deviceExtensionClient) Sync(ctx context.Context, opts ...grpc.CallOption) (DeviceExtension_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceExtension_serviceDesc.Streams[0], "/arhat.DeviceExtension/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceExtensionSyncClient{stream}
	return x, nil
}

type DeviceExtension_SyncClient interface {
	Send(*DeviceMsg) error
	Recv() (*DeviceCmd, error)
	grpc.ClientStream
}

type deviceExtensionSyncClient struct {
	grpc.ClientStream
}

func (x *deviceExtensionSyncClient) Send(m *DeviceMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceExtensionSyncClient) Recv() (*DeviceCmd, error) {
	m := new(DeviceCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceExtensionServer is the server API for DeviceExtension service.
type DeviceExtensionServer interface {
	Sync(DeviceExtension_SyncServer) error
}

// UnimplementedDeviceExtensionServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceExtensionServer struct {
}

func (*UnimplementedDeviceExtensionServer) Sync(srv DeviceExtension_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterDeviceExtensionServer(s *grpc.Server, srv DeviceExtensionServer) {
	s.RegisterService(&_DeviceExtension_serviceDesc, srv)
}

func _DeviceExtension_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceExtensionServer).Sync(&deviceExtensionSyncServer{stream})
}

type DeviceExtension_SyncServer interface {
	Send(*DeviceCmd) error
	Recv() (*DeviceMsg, error)
	grpc.ServerStream
}

type deviceExtensionSyncServer struct {
	grpc.ServerStream
}

func (x *deviceExtensionSyncServer) Send(m *DeviceCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceExtensionSyncServer) Recv() (*DeviceMsg, error) {
	m := new(DeviceMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DeviceExtension_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arhat.DeviceExtension",
	HandlerType: (*DeviceExtensionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _DeviceExtension_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device_grpc.proto",
}
